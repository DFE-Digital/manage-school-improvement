name: Run Cypress tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      USERNAME:
        required: true
      AZURE_WEB_ENDPOINT:
        required: true
      AZURE_API_ENDPOINT:
        required: true
      AZURE_API_KEY:
        required: true
      CYPRESS_TEST_SECRET:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: environment

concurrency:
  group: ${{ github.workflow }}

jobs:
  cypress-tests:
    name: Run Cypress Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        browser: [
          "edge"
        ]
    container:
      image: cypress/browsers:22.13.1@sha256:914c9814a9567f32660203db7ecd610b8f8fede6e9103885728b3bd3f6dca4ff
    defaults:
      run:
        working-directory: src/Dfe.ManageSchoolImprovement.CypressTests
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.ref }}

      - name: Rise Cypress cache
        uses: cypress-io/github-action@v6
        with:
          runTests: false
          browser: ${{ matrix.browser }}
          working-directory: src/Dfe.ManageSchoolImprovement.CypressTests

      - name: Run (dev)
        if: inputs.environment == 'development'
        uses: cypress-io/github-action@v6
        env:
          CYPRESS_username: ${{ secrets.USERNAME }}
          CYPRESS_grepTags: '-smoke'
          CYPRESS_url: ${{ secrets.AZURE_WEB_ENDPOINT }}
          CYPRESS_apiKey: ${{ secrets.AZURE_API_KEY }}
          CYPRESS_authKey: ${{ secrets.CYPRESS_TEST_SECRET }}
          CYPRESS_api: ${{ secrets.AZURE_API_ENDPOINT }}
          CYPRESS_msiApi: ${{ secrets.AZURE_DEV_MSIAPI_ENDPOINT}}
        with:
          browser: ${{ matrix.browser }}
          working-directory: src/Dfe.ManageSchoolImprovement.CypressTests
          wait-on: ${{ secrets.AZURE_WEB_ENDPOINT }}
          spec: cypress/e2e/**/*.cy.ts

      - name: Run (test)
        if: inputs.environment == 'test'
        uses: cypress-io/github-action@v6
        env:
            CYPRESS_username: ${{ secrets.USERNAME }}
            CYPRESS_url: ${{ secrets.AZURE_WEB_ENDPOINT }}
            CYPRESS_apiKey: ${{ secrets.AZURE_API_KEY }}
            CYPRESS_authKey: ${{ secrets.CYPRESS_TEST_SECRET }}
            CYPRESS_api: ${{ secrets.AZURE_API_ENDPOINT }}
            CYPRESS_msiApi: ${{ secrets.AZURE_TEST_MSIAPI_ENDPOINT}}
        with:
            browser: ${{ matrix.browser }}
            working-directory: src/Dfe.ManageSchoolImprovement.CypressTests
            wait-on: ${{ secrets.AZURE_WEB_ENDPOINT }}
            spec: cypress/e2e/smoke/*

      - name: Upload screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: screenshots-${{ inputs.environment }}-${{ matrix.browser }}
          path: src/Dfe.ManageSchoolImprovement.CypressTests/cypress/screenshots

      - name: Generate report
        if: always()
        run: |
          mkdir mochareports
          npm run generate:html:report

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: reports-${{ inputs.environment }}-${{ matrix.browser }}
          path: src/Dfe.ManageSchoolImprovement.CypressTests/mochareports

      - name: Report results to Teams
        if: always()
        run: |
          # Create a Node script to send test results to Teams
          node <<EOF
          const axios = require('axios');
          const fs = require('fs');
          const path = require('path');
          
          async function sendTeamsNotification() {
            try {
              // Read the combined report JSON to get test statistics
              let reportStats = { tests: 0, passes: 0, failures: 0 };
              const reportPath = path.join(process.cwd(), 'mochareports', 'report.json');
          
              if (fs.existsSync(reportPath)) {
                const reportData = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                if (reportData && reportData.stats) {
                  reportStats = {
                    tests: reportData.stats.tests || 0,
                    passes: reportData.stats.passes || 0,
                    failures: reportData.stats.failures || 0
                  };
                }
              } else {
                console.warn('Report file not found at:', reportPath);
              }
          
              // Define card style based on test results
              const hasFailures = reportStats.failures > 0;
              const style = hasFailures ? "attention" : "good";
              const statusText = hasFailures ? "**Cypress Test Run Failed** ❌" : "**Cypress Test Run Passed** ✅";
          
              // Create Teams message card
              const message = {
                type: "message",
                attachments: [{
                  contentType: "application/vnd.microsoft.card.adaptive",
                  contentUrl: null,
                  content: {
                    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    type: "AdaptiveCard",
                    version: "1.2",
                    body: [{
                      type: "Container",
                      style: style,
                      items: [
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: statusText,
                          size: "large",
                          horizontalAlignment: "center"
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Branch:** " + process.env.GITHUB_REF
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Workflow:** " + process.env.GITHUB_WORKFLOW
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**Environment:** " + process.env.ENVIRONMENT
                        },
                        {
                          type: "FactSet",
                          facts: [
                            { title: "Total Tests:", value: reportStats.tests.toString() },
                            { title: "Passed:", value: reportStats.passes.toString() },
                            { title: "Failed:", value: reportStats.failures.toString() }
                          ]
                        },
                        {
                          type: "TextBlock",
                          wrap: true,
                          text: "**See more information:** [" + process.env.INFORMATION_LINK + "](" + process.env.INFORMATION_LINK + ")"
                        }
                      ]
                    }]
                  }
                }]
              };
          
              // Send the notification
              await axios.post(process.env.TEAMS_WEBHOOK_URL, message);
              console.log("Message sent to Teams successfully");
            } catch (error) {
              console.error("Error sending notification to Teams:", error);
              process.exit(1);
            }
          }
          
          sendTeamsNotification();
          EOF
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          ENVIRONMENT: ${{ inputs.environment }}
          INFORMATION_LINK: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
